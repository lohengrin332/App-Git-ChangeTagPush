#!/usr/bin/env perl

=head1 NAME

change-tag-push - Utility to update Changes, edit, tag with version and push

=head1 SYNOPSIS

    change-tag-push v1.42.7   - use the specified version

Typical usage:

    change-tag-push major     - use the next patch version vN+1.0.0
    change-tag-push minor     - use the next patch version vN.N+1.0
    change-tag-push patch     - use the next patch version vN.N.N+1

Special case usage:

    change-tag-push current   - add changes to the latest version section
    change-tag-push next      - add changes to the {{$NEXT}} version section

=head1 DESCRIPTION

This is a handy utility that will:

* Pick the next appropriate version number

* Get details of commits since the last time the Changes file was committed

* Rewrite the Changes file to include the version, the data, and the commit details

* Open an editor for you to rewrite the raw commit messages for human readability

* Commit the Changes file

* Create an annotated tag for the current HEAD, i.e. the Changes commit

* Push the tag

There are many sanity checks performed along the way. If any insanity creeps through
do let me know.

=head2 NOTES

The entire Changes file gets rewritten, including standardizing the indent and
wrapping the text, so don't be surprised if the first use of this utility
causes a large diff.

=cut

use strict;
use warnings;

use CPAN::Changes::FromGit;
use IO::Prompt;
use Getopt::Long;

GetOptions(
    'dirty!' => \my $opt_dirty,
) or exit 1;

my $cfg = CPAN::Changes::FromGit->new();

my $version_param = shift
    or die "No version specified (e.g., vN.N.N, major, minor, patch, current or next)\n";

die "Current repo contains uncommitted changes\n"
    if !$opt_dirty
    && $cfg->gitrepo->run("status", "--porcelain", "--untracked-files=no");

my $new_version = $cfg->add_changes($version_param);

die "Tag $new_version already exists in repo! You must use a newer version.\n"
    if $cfg->gitrepo->run("show-ref", $new_version);

$cfg->write_changes_file;

$ENV{EDITOR} ||= "vi";
system("$ENV{EDITOR} ". $cfg->changes_file);

system("git", "diff", "--ignore-all-space", $cfg->changes_file);

# sanity check that the version we're about to tag still exists in Changes
# (in case it was accidentally deleted)
CPAN::Changes::FromGit->new(changes_file => $cfg->changes_file)
    ->get_latest_version_in_changes eq "$new_version"
    or die "Error: changes file no longer contains an entry for $new_version!\n"
    if $version_param ne 'next';

prompt(-yes_no, "Commit changes: ") or die "Aborted\n";
$cfg->commit_changes_and_tag_with_version($new_version);

prompt(-yes_no, "Push upstream: ") or die "Aborted\n";
$cfg->gitrepo->run("push", "--follow-tags");

exit 0;
